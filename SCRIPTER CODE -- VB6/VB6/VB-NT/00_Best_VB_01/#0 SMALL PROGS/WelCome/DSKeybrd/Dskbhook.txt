'********************************************************************************************
'Documentation to the Standard DLL "dskbhook.dll"                (c) 2002 by Delphin Software
'********************************************************************************************
'+++++++++++++++++++++++  This DLL is Freeware and provided "As Is"  ++++++++++++++++++++++++
'********************************************************************************************
Purpose of the DLL:

The DLL enables you to watch for keyboard activities in foreign apps or system wide and
- if desired - to block these activities. Therefore, either on the foreign app, or system
wide will be installed a keyboard hook, which calls a public function in your app. 
"action" tells something about the action (key down, key up, extended key), and "state" gives
information about the state of "Shift", "Ctrl", and "ALT". 
The virtual key code is provided in "vcode", and "scode" gives the ScanCode (see SDK).

Under Windows NT4, SP3 and higher as well as Windows 2000 and XP, the Hook will be installed 
as LowLevel Hook; in other Win32 versions as "normal" keyboard hook. On a LowLevel Hook, you  
can read from parameter "action", whether the keystroke was created by program code using 
"keybd_event()" (s.b.).

Because the functionallity of the DLL is different depending of the kind of hook, the 
following lines will give a brief description how it works, looking at a system wide hook. 

1. LowLevel-Hook:
On the first call of a DLL function, the DLL is mapped into the address space of the calling
app, and on the call of "SetKeyboardHook()", the hook will be installed. At the same time, 
the DLL creates an invisible dialog window which serves for the communication (see below).
On each keystroke, Windows first calls the hook function of the DLL, and after its return, 
the further processing follows considering the return value of the hook function.
By default, from the hook function a message with a copy of the keystroke parameters will be 
posted to the DLL's dialog window, and from its window procedure, the callback function will 
be called. The hook function itself will be processed immediately after posting the message
without any possibility for influence. If you want to suppress some keystrokes, you must 
define it before getting the callback using the function "SetKeyParams()". This procedure is
very safe and sufficient in the most cases.

Sometimes however, you would be glad if you were able to decide inside of the callback
function whether to forward the keystroke or not. This is not possible using the default 
settings, but it can be achievied by calling the function "UseSendmessage(1)" (the function 
name is derived from the normal hook and doesn't fit for the LowLevel hook). Than, the hook
function (which is inside of your address space) calls the callback function directly and
evaluates its return value. If this value is greater than zero, it has priority against the
global or presettings. A return value of 1 means: "Forwarding to the target thread, but
not to the hook chain"; 2 means "Suppress the keystroke", and 3 is "Forwarding completely".
If the return value is zero, the global or presetting are valid. 
Using the LowLevel hook, you'll be able to suppress all of the keys except of 
"Ctrl+Alt+Del", but system keys, windows keys, F1, etc.

2. Normal Hook
On the normal hook, the whole is a little more complicated. Until the DLL dialog window is 
created, the course is just the same as on LowLevel hook. The differences will be visible
as soon as another application comes into play. When a system wide hook is installed, a new
instance of the DLL will be mapped into the address space of each application as soon it
trys to remove a keyboard message from its message queue. At the end, there exist as much
instances of the DLL as applications are opened which use(d) keyboard input. But the only 
one which has created the dialog window is the instance in your app.
When the hook function of an "extern" instance is called, this function posts a message
to the dialog window, and this window calles your callback function. This procedure is
also asycronously, but very safe. 
   
To achieve a directly communication and get influence to the hook function, the 
communication must be realized using "SendMessage()", and this will be possible using the
function "UseSendMessage()" (this explains the name). Than, the hook function sends a message
to the dialog window and waits for return. The window procedure of the dialog window calls 
the callback function and waits for return. After return, the window procedure passes the 
return value to the waiting "SendMessage()" call from the hook function, and this call after
all can return to the hook function. There arrived, it delivers the return value from the
callback function, and the hook function will evaluate it in the same way as done in the
LowLevel hook.

But there are some other differences against the LowLevel hook:
You cannot suppress the system keys. Windows "notes" a state, let's say the Shift state when
the Shift key was pressed, an the following virtual keycode of "65" will generate "A" even
when you have "suppressed" the Shift key (16). But you can suppress the "a" only when the
Shift state is valid or invalid ...
 
It should be noted that, regarding the system keys, the two kinds of hook will deliver 
different key codes (see also function "NoTL()").
 
The callback function must have the following prototype:

Public Function Callback&(ByVal action&, ByVal state&, ByVal vcode&, ByVal scode&) 

The address of this function must be passed to "SetKeyboardHook()" in parameter "Adr&" using
the AddressOf-Operator.

For every keycode, you can decide whether to allow to let these messages reach the
destination window or not. To set these keycodes, use the function "SetKeyParams&()".

For all the other keycodes, you can define, how to let them go - use the function
"SetGlobalParams()" to determine the way. You can change these settings by a new call of
this function.

The DLL is useful for analyzing and/or suppressing the keystrokes either for the thread of 
the window "hTarget&" or system wide.

NOTE:
You can NOT suppress "Ctrl+Alt+Del" by use of this DLL, but using the LowLevel Hook, you can
suppress all the other keys like "Alt"+"Tab", "Ctrl"+"Esc" etc.
'********************************************************************************************
Function declaration:

Declare Function SetKeyboardHook& Lib "dskbhook" (ByVal hTargt&, ByVal Callback&, ByVal Adr&)
'--------------------------------------------------------------------------------------------
Parameters:

hTargt&
hTargt& = hWnd&: The handle of the window, on the thread of which the hook should be 
                 installed, or
hTargt& = -1     for a system wide hook, or
hTargt& = 0      to release the hook.

Callback& (0/1)
When you want to get informations for all keystrokes, set this value to 1 (One), otherwise 0 
(Zero); the latter too, if you want callback only for special keys or combinations. 

Adr&
The address of a public function in your program, which must reside in a standard module and 
will be called from the DLL, passed using "AddressOf Callback" (see above):

Public Function Callback&(ByVal action&, ByVal state&, ByVal vcode&, ByVal scode&) 

The following parameter are passed when the function is called:

- action&:
Information about "Extended Key" and about press/release 
   (FirstPress means the manual KeyDown):
If action And 1 Then Extended = True Else Extended = False
If action And 2 Then FirstPress = True Else FirstPress = False
If action And 4 Then KeyUp = True Else KeyUp = False
Only on LowLevel Hook:
If action And 8 Then Injected = True Else Injected = False  'Injected = "keybd_event()"

- state&:
Information, whether one or more System Keys were pressed:
If state And 1 Then Shift = True Else Shift = False
If state And 2 Then Ctrl = True Else Ctrl = False
If state And 4 Then Alt = True Else Alt = False

- vcode&:  the virtual keycode,
- scode&:  the ScanCode (see SDK).

Using the return value of the callback function and choosing the option given by the function
"UseSendMessage(1)", you can decide in the callback function, whether and how the keystroke
should be forwarded: 
Callback = 0: No influence; the global and presettings are valid
Callback = 1: Forwarding to the target thread, not to the hook chain
Callback = 2: Suppress the keystroke
Callback = 3: Forwarding completely.

NOTE:
If you don't need a callback (e.g. for suppressing keys only), set 
Adr& = 0. Then you don't need to write this callback function.
'--------------------------------------------------------------------------------------------
Return value:

1 (True), if the hook was installed or released successfully, otherwise 
0 (False).
'********************************************************************************************
Function declaration:

Declare Function SetGlobalParams& Lib "dskbhook" (ByVal Repeat&, ByVal Discard&)
'--------------------------------------------------------------------------------------------
Parameter:

Repeat& (0, 1; Default = 0)
This parameter is valid for all the keycodes which are NOT set explicitely by use of the
functions "SetKeyParams()".
If Repeat& = 0, the keystrokes will be signalled only when you first press or release the key
                (KeyUp),
if Repeat& = 1, also when you hold down a key and the keyboard is repeating.

Discard& (0, 1, 2; Default = 0)
Discard& = 0 lets the keystrokes go to its destination window and the hook chain,
Discard& = 1 lets the keystrokes go only to its destination thread,
Discard& = 2 suppresses the keystrokes.

This parameter is valid for all the keycodes which are NOT set explicitely by use of the
functions "SetKeyParams()".
You can call this function multiple times to change the settings.
'--------------------------------------------------------------------------------------------
Return value:

True (1), if Discard& is 0, 1 or 2, otherwise
False (0).
'********************************************************************************************
Function declaration:

Declare Function SetKeyParams& Lib "dskbhook" (ByVal KeyCode&, ByVal SCAE&, ByVal RDC&)
'--------------------------------------------------------------------------------------------
Parameters:

KeyCode&
the virtual keycode of the keystroke to watch for.

SCAE&
This parameter determines, for which combination of the KeyCode key with System keys the
settings given in RDC should be valid:

SCAE = SCAE Or 1: Shift key must be pressed,
SCAE = SCAE Or 2: Ctrl key must be pressed,
SCAE = SCAE Or 4: Alt key must be pressed,
SCAE = SCAE Or 8: must be an Extended Key.
You may combine these parameters in any way.

When you make no specification in SCAE (SCAE = 0), the settings in RDC apply to the "normal" 
Keycode key.

RDC&
This parameter determines, which settings regarding Repeat, Discard and Callback will apply
to the combination given in SCAE (Default: 0 (Zero)):
RDC = RDC Or 1:  Repeat = 1; the keystrokes will be signalled on every keyboard event.
RDC = RDC Or 2:  Discard& = 1 lets the keystrokes go only to its destination thread,
RDC = RDC Or 4:  Discard& = 2 suppresses the keystrokes,
RDC = RDC Or 8:  Necessary for Callback,
RDC = RDC Or 16: Discard only, when no Shift, Ctrl, or Alt key is pressed.

You can call this function multiple times to change the settings.
'--------------------------------------------------------------------------------------------
Return value:

True (1) on success, otherwise
False (0).
'********************************************************************************************
Function declaration:

Declare Function NoTL& Lib "dskbhook" (ByVal TL&)
'--------------------------------------------------------------------------------------------
Parameter:

TL& (0, 1; Default = 1)
The LowLevel Hook, for several keys returns other key codes than a normal Hook. This is valid
especially for "Shift", "Ctrl", and "Alt". For a unique handling, by default these codes will
be translated by the DLL into the normal codes:
"Shift": LLC = 160 (left), 161 (right) -> 16
"Ctrl":  LLC = 162 (left), 163 (right) -> 17
"Alt":   LLC = 164 -> 18
If you want to get the original values from the callback function, call "NoTL" passing "1" 
(One); for resetting passing 0 (Zero).
If you want to set special conditions for these keys using "SetKeyParams()", you can use the 
"normal" code (16, 17, 18) as well as the original code. When using the normal code, these 
values will be set for both the left and the right key.
If you plan to use the option given by "UseSendMessage(1)", it is recommendet to work with 
the original key code; it means you should call "NoTL(1)". 
'--------------------------------------------------------------------------------------------
Return value:

True (1), if "translated", otherwise 
False (0).
'********************************************************************************************
Function declaration:

Declare Function IsNT& Lib "dskbhook" ()
'--------------------------------------------------------------------------------------------
Parameter:

This function has no parameter.
'--------------------------------------------------------------------------------------------
Return value:

True (1), if the operating system is WinNT4, Service Pack 3 or higher, Win2K/XP, otherwise 
False (0). With this result, you can adapt your code.
'********************************************************************************************
Function declaration:

Declare Function NoLLHook& Lib "dskbhook" (ByVal LLHook&)
'--------------------------------------------------------------------------------------------
Parameter:

LLHook& (1)
By default, when the operating system supports the LowLevel Hook, it will be installed.
If you nevertheless want to install the "normal" hook, call this function passing 1 (one), 
*BEFORE* you call "SetKeyboardHook()". This function can be called only once!    
'--------------------------------------------------------------------------------------------
Return value:

True (1) on the first call, otherwise
False (0).
'********************************************************************************************
Function declaration:

Declare Function HookVB& Lib "dskbhook" (ByVal Hook&)
'--------------------------------------------------------------------------------------------
Parameter:

Hook& (0, 1; Default = 0)
By default, when the DLL is mapped into the address space of the VB?.exe, it will NOT call 
the callback function to avoid multiple calls in the VB IDE. If you want to get callbacks
from the DLL instance which is mapped to the VB?.exe, you must call this function passing 
a Hook value of 1. To end the callback, call the function passing 0 (zero). 
'--------------------------------------------------------------------------------------------
Return value:

True  (1), if the VB?.exe is hooked too, otherwise
False (0).
'********************************************************************************************
Function declaration:

Declare Function UseSendMessage& Lib "dskbhook" (ByVal Send&)
'--------------------------------------------------------------------------------------------
Parameter:

Send& (0, 1)
By default, the DLL internally uses "PostMessage()" to send the keystroke information from 
the instances which are hooked into foreign apps to the instance, which is loaded by the 
calling app. There is a hidden window which receives these messages and calls the callback 
function(s). When you call this function passing "1", the DLL will use "SendMessage()" to 
send the informations to the hidden window of the primary instance. This means, the entire
processing of the messages will be continued after the code in your callback function(s) was
processed. Otherwise, the advantage is that you'll be able to influence the forwarding from
inside of your callback function. Be careful when you use this option. 
'--------------------------------------------------------------------------------------------
Return value:

Always True (1).
'********************************************************************************************
Function declaration:

Declare Function SetStop& Lib "dskbhook" (ByVal Stp&)
'--------------------------------------------------------------------------------------------
Parameter:

Stp& (0, 1)
Using this function, you can temporarily intercept the callback without releasing the hook.
After calling this function passing Stp > 0, no callback will happen, but the desired 
discarding of single or all keystrokes will continue working.
You can use this function to avoid callback when you send WM_KEY... messages yourself.
Set Stp to 1 before sending and back to 0 after sending. 
'--------------------------------------------------------------------------------------------
Return value:

True (1), when Stp != 0, otherwise False (0).
'********************************************************************************************
Delphin Software
Mail:  delphinsoft@gmx.de
Phone: 049 7251 18671
'********************************************************************************************
Samples:
Suppressing the "Tab" key only in combination with "Alt"; no callback:
Call SetKeyboardHook(-1, 0, 0)
Call SetKeyParams(9, 4, 5)

Suppressing the "Escape" key only in combination with "Ctrl"; no callback:
Call SetKeyboardHook(-1, 0, 0)
Call SetKeyParams(27, 2, 5)

Suppressing the "Enter" key in numpad (Extended Key); callback only for this key; no Repeat:
Call SetKeyboardHook(-1, 0, AddressOf Callback)
Call SetKeyParams(13, 8, 12)

Suppressing the character "A" from the callback function, global callback
Call SetKeyboardHook(-1, 1, AddressOf Callback)
Call UseSendMessage(1)

Public Function Callback&(ByVal action&, ByVal state&, ByVal vcode&, ByVal scode&) 
Static Shift As Boolean

Shift = IIf(State And 1, True, False)
If vcode = 65 And Shift Then
  Callback = 2  'Return Value for suppressing
End If

'Short version:
'If vcode = 65 And (State And 1) Then Callback = 2
End Function
'********************************************************************************************
