{\rtf1\ansi\ansicpg1252\deff0\deflang1044{\fonttbl{\f0\fswiss\fcharset0 Arial;}}
\viewkind4\uc1\pard\b\f0\fs24\par
A small guide to the use of FStudio Alpha\b0\fs20\par
\par
\par
The alpha version of the app is certainly not user friendly, as I'm working on it right now. I concentrate on the basic program functionality first, the user interface will have to be improved later. \par
\par
\b The Menus\par
\b0\par
The menus doesn't provide much functionality yet.. I haven't implemented saving of parameter files yet. That is a feature I will implement in the near future, since it's pretty basic program functionality. \par
As of now, you can only create new fractals and arrange the windows. If you want to find out which version of the program you're using, try the help menu --> about.\par
The toolbar is not functioning yet.\par
\par
\b The Params Window\par
\b0\par
This window holds all the fractal parameters/settings, as the name implies. The settings are divided into categories, separated in a tabbed dialog box.\par
\par
\b Calculation Options\par
\b0\par
\i Fractal type\i0  - this selects the formula that is used to calculate the fractal. Not many formulae here yet..\par
\par
\i Max iterations\i0  - should be familiar to anyone who has used a fractal plotter before. The number of the function is iterated as long as the bailout criteria is not met.\par
\par
\i Bailout value\i0  - u should know what this is for..\par
\par
\i C value 1\i0  - basically, this is a parameter to the formula. It can be used for pertubation (but you can't specify how to perturb, it's coded in the formula). For a julia type fractal, this is the real part of the complex parameter C.\par
\par
\i C value 2\i0  - same as above\par
\par
\i Linear color continuity\i0  - with this option turned on, the colors in the palette will be interpolated for non-integer iteration values. This creates smooth transitions in the resulting image, less need for anti-aliasing.\par
\par
\i Output size\i0  - the program supports quadratic frames only as of now. This is likely to be implemented sometime (hopefully) soon, but is not a no. 1 priority.\par
\par
\i Direct File Output - \i0 If you wan't to render LARGE fractal images, you should use the \i Direct File Output\i0  function. This will use less memory, by calculating the image one line at a time (instead of in chunks of specified size). Specify the size of the image in the size text box. Default is 2000. I haven't tested it myself with images large than 3000x3000 pixels, but it should function quite well with pictures much larger than that. The real problem then is speed, and how to handle the pretty HUGE bmp file that is generated ;-)\par
\i\par
\i0\par
\b Image Filters\par
\b0\par
This is where you specify which filters to use for image enhancement. More than the existing ones are to be added. \par
\par
There are two main categories of filters - mapping filters and enhancement filters.\par
The mapping filters takes care of mapping the calculated iteration values to a palette index, while the enhancement filters enhances the image by applying some function to the mapped value. The main difference is that the mapping filters assigns a value to the palette index, while the enhancement filters modify it.\par
\par
Further, the filters section has been divided between Inside and Outside filters. The difference lies in whether the point that has been calculated belongs to the specified 'function set'.\par
Points that belong to the set will have the inside filters applied to them, while the others will be modfied by the outside filters.\par
\par
The buttons on the right part of the dialog are used to add or remove filters, as well as change the order by which the filters are applied. By double clicking on a filter you can modify its parameters or disable it (he type of filter is specified when you add it, it cannot be changed later).\par
\par
\b Viewpoint History\par
\b0\par
This part of the dialog keeps track of the zooms and moves of viewpoint you do on the fractal. The uppermost one is the current view. To undo zooms/moves, just double-click the zoom/move you want to make active, but remember that this is a one-way process - the zoom/move information you undid will be removed. Currently, there is no way to change the coordinates manually, but it's likely that this will be implemented in the near future.\par
\par
If you've zoomed in or moved a lot, the viewpoint history will be filled up with all the changes. If you wan't to tidy it up, click the 'Clear History' button, but be aware that this will delete the history. Since you cannot zoom out yet, it's not a good idea to use this functionality.\par
\par
\b Position of visible area\par
\b0\par
This is where you will be able to change the viewpoint manually some time in the future.\par
To go to the default (-2,-2)-(2,2) position, click the 'Default' button.\par
\par
\b Palette Options/ Creation\b0\par
\par
Here, you may create new color palettes to use for coloring the fractal. It will be created by picking random colors, and then interpolate between them. You may specify the size of the palette, the default is 2000 colors. To ensure some contrast in the resulting palette, you may want to have the 'Use dispersion control' option checked. This will pick random colors based on the deviation from the last color. The \i Gradient Period\i0  option allows you to specify the size of the interval on which the colors are interpolated, i.e how many colors are between the randomly picked ones.\par
To open and save palettes, use the 'Open Palette' and 'Save Palette' buttons.\b\par
\b0 To invert all the colors in the palette, use the 'Invert Colors' button. Done twice, this will result in the original colors. If, for some reason, you want a black background, you may set the first color in the palette to black with the 'Set first color...' button. Then you can use a multiply filter with parameter 0 for the background points, and eventually an 'add' filter for the other points to ensure that they will not get colored black.\par
\par
\b Realtime Palette Animation\b0\par
\par
This is the color cycling functionality of the program. It lets you select a speed to cycle with, but the resulting speed depends on your hardware - it is not timed (yet).\par
The normalize options don't always work as expected yet, but 'Interpolate Palette' option works. It may be useful for removing the abrupt color changes caused by the fact that the cycling doesn't interpolate between colors for no-integer iteration values (speed issues). This option scales the palette as well as the iteration values up to a larger size, and interpolates between the colors. This uses more memory, but will result in much smoother frames. Be aware that setting the scale to a large value may cause overflow errors and crash the program.\par
\par
\b States\b0\par
\par
This hasn't been implemented yet, but I'm planning to make this the foundation for avi-animation  support. The idea is that you can save different states of the fractal (all parameters and options) and then 'interpolate' between the settings and render appropriate images. The images will be put into an AVI file as uncompressed Device Independent Bitmap frames, and will occupy a LOT of storing space on yer harddrive..\par
\par
\par
Note - Continous Iterations mapping filter\par
This filter will do the same job as the Iterations mapping filter,except it will interpolate the iteration value based on the proportions between the magnitude of Z(n) , the bailout value and the magnitude of Z(n+1), where Z(n+1) was the value that caused the bailout. This results in a smoother image with less need for antialiasing.\par
\par
\par
\par
---------------------------------------------------------------------------------------------------------------------------------------\par
\par
If you have any questions regarding the use of this program, suggestions or bug reports, feel free to mail me at < erlinga@stud.ntnu.no > or < e-jander@online.no > .\par
\par
Erling Andersen\par
}
 