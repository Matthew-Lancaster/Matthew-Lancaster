// gen_activewa.idl : IDL source for gen_activewa
//

// This file will be processed by the MIDL tool to
// produce the type library (gen_activewa.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";
interface IMediaItem;
interface IMediaLibrary;

[
	object,
	uuid(83F2DBE6-FA22-4D6B-A281-0427D7AF490C),
	dual,
	nonextensible,
	helpstring("IPlaylist Interface"),
	pointer_default(unique)
]
interface IPlaylist : IDispatch{
	[propget, id(1), helpstring("Number of items in the playlist")] HRESULT Count([out, retval] LONG *pVal);
	[propget,  restricted, id(DISPID_NEWENUM), helpstring("property _NewEnum")] HRESULT _NewEnum([out, retval] IUnknown** pVal);
	[propget, id(DISPID_VALUE), helpstring("property Item")] HRESULT Item([in] LONG index, [out, retval] IMediaItem** pVal);
	[propget, id(2), helpstring("Gets the current playlist position")] HRESULT Position([out, retval] LONG* pVal);
	[propput, id(2), helpstring("Sets the playlist position")] HRESULT Position([in] LONG newVal);
	[id(3), helpstring("method GetSelection")] HRESULT GetSelection([out,retval] VARIANT* SelectionArray);
	[id(4), helpstring("method Clear")] HRESULT Clear(void);
	[id(5), helpstring("method DeleteIndex")] HRESULT DeleteIndex([in] LONG index);
	[id(6), helpstring("method SwapIndex")] HRESULT SwapIndex([in] INT from, [in] INT to);
	[id(7), helpstring("method FlushCache")] HRESULT FlushCache(void);
	[propget, id(8), helpstring("property Hwnd")] HRESULT Hwnd([out, retval] LONG* pVal);
	[id(9), helpstring("SendMessage on the playlist hwnd. Typically pass 1024 as msg paramater")] HRESULT SendMsg([in]LONG msg, [in]LONG wParam, [in]LONGLONG lParam, [out,retval] LONG* result);
	[id(10), helpstring("PostMessage on the playlist hwnd")] HRESULT PostMsg([in] LONG msg, LONG wParam, [in] LONGLONG lParam, [out,retval] LONG* result);
};
[
	object,
	uuid(2EBD7857-B229-4247-9FAA-17C505410474),
	dual,
	nonextensible,
	helpstring("IApplication Interface"),
	pointer_default(unique)
]
interface IApplication : IDispatch{
	[id(1), helpstring("reserved")] HRESULT SayHi(void);
	[propget, id(2), helpstring("Playlist object")] HRESULT Playlist([out, retval] IPlaylist ** pVal);
	[propget, id(3), helpstring("MediaLibrary object")] HRESULT MediaLibrary([out, retval] IMediaLibrary** pVal);
	[id(4), helpstring("Play")] HRESULT Play(void);
	[id(5), helpstring("Stop playback")] HRESULT StopPlayback(void);
	[id(6), helpstring("Pause playback")] HRESULT Pause(void);
	[id(7), helpstring("Previous track")] HRESULT Previous(void);
	[id(8), helpstring("Skip to the next track")] HRESULT Skip(void);

	[id(9), helpstring("Create a media item from a filename")] HRESULT LoadItem([in] BSTR FileName, [out,retval] IMediaItem** MediaItem);
	
	[id(10), helpstring("Calls a sub routing that you specify when the timeout has elapsed. Returns an id that you can use with CancelTimer")] HRESULT SetTimeout([in] LONG timeout, IDispatch* timeoutfunction, [out,retval] LONG* timerid);
	[id(11), helpstring("Cancel a previously set timer, using the id returned from settimeout")] HRESULT CancelTimer([in] LONG timerid);
	
	[id(12), helpstring("The ini filename. Typically winamp.ini")] HRESULT GetIniFile([out,retval] BSTR* inifilename);
	[id(13), helpstring("The directory the ini is stored in")] HRESULT GetIniDirectory([out,retval] BSTR* iniDirectory);
	
	[id(14), helpstring("Execute a Visualisation Plugin")] HRESULT ExecVisPlugin([in] BSTR VisDllFile);

	[propget, id(15), helpstring("Get or set the current skin")] HRESULT Skin([out, retval] BSTR* pVal);
	[propput, id(15), helpstring("Get or set the current skin")] HRESULT Skin([in] BSTR newVal);
	[propget, id(16), helpstring("Get or set the current shuffle status")] HRESULT Shuffle([out, retval] VARIANT_BOOL* pVal);
	[propput, id(16), helpstring("Get or set the current shuffle status")] HRESULT Shuffle([in] VARIANT_BOOL newVal);
	[propget, id(17), helpstring("Get or set the current repeat status")] HRESULT Repeat([out, retval] VARIANT_BOOL* pVal);
	[propput, id(17), helpstring("Get or set the current repeat status")] HRESULT Repeat([in] VARIANT_BOOL newVal);
	
	[id(18), helpstring("Restart Winamp")] HRESULT RestartWinamp(void);
	[id(19), helpstring("Show the popup notifier")] HRESULT ShowNotification(void);
	[id(20), helpstring("Winamp version number")] HRESULT GetWaVersion([out,retval] LONG* version);
	[id(21), helpstring("An array of MediaItems which were selected in the send to menu")] HRESULT GetSendToItems([out,retval] VARIANT* Items);
	[propget, id(22), helpstring("Volume 0-255")] HRESULT Volume([out, retval] BYTE* pVal);
	[propput, id(22), helpstring("Volume 0-255")] HRESULT Volume([in] BYTE newVal);
	[propget, id(23), helpstring("Left-Right stereo panning -127 to 127")] HRESULT Panning([out, retval] INT* pVal);
	[propput, id(23), helpstring("Left-Right stereo panning -127 to 127")] HRESULT Panning([in] INT newVal);
	[propget, id(24), helpstring("Returns 1 if playing, 3 if paused, 0 if stopped")] HRESULT PlayState([out, retval] LONG* pVal);
	[propget, id(25), helpstring("Seek bar position for the current track")] HRESULT Position([out, retval] LONG* pVal);
	[propput, id(25), helpstring("Seek bar position for the current track")] HRESULT Position([in] LONG newVal);
	
	[id(26), helpstring("Run a script by full filename, with arguments")] HRESULT RunScript([in] BSTR scriptfile, [in] BSTR arguments);
	[id(27), helpstring("Winamp will update information about the current title")] HRESULT UpdateTitle(void);

	[propget, id(28), helpstring("The HWND of the main winamp window")] HRESULT Hwnd([out, retval] LONG* pVal);
	[id(29), helpstring("SendMessage on the main hwnd. Typically pass 1024 as msg paramater, or 237 for a Command.")] HRESULT SendMsg([in]LONG msg, [in]LONG wParam, [in]LONGLONG lParam, [out,retval] LONG* result);
	[id(30), helpstring("Call PostMessage on the main HWND.")] HRESULT PostMsg([in]LONG msg,[in]LONG wParam, [in]LONGLONG lParam, [out,retval]LONG* result);
};

[
	object,
	uuid(E7B30607-7180-4E40-A5C7-AF9F7D1C30C7),
	dual,
	nonextensible,
	helpstring("IMediaItem Interface"),
	pointer_default(unique)
]
interface IMediaItem : IDispatch{
	[propget, id(DISPID_VALUE), helpstring("Typically the filename")] HRESULT Name([out, retval] BSTR* pVal);
	[propget, id(1), helpstring("Filename")] HRESULT Filename([out, retval] BSTR* pVal);
	[propget, id(2), helpstring("Position in the playlist (-1 if NA)")] HRESULT Position([out, retval] LONG* pVal);
	[propput, id(2), helpstring("Position in the playlist (-1 if NA)")] HRESULT Position([in] LONG newVal);
	[propget, id(3), helpstring("Title")] HRESULT Title([out, retval] BSTR* pVal);
	[propput, id(3), helpstring("Title")] HRESULT Title([in] BSTR newVal);
	[id(4), helpstring("Advanced Title Formatting on the item")] HRESULT ATFString([in] BSTR ATFSpecification, [out,retval] BSTR* FormattedString);
	[id(5), helpstring("Enqueue the item to the end of the playlist")] HRESULT Enqueue(void);
	[propget, id(6), helpstring("Artist")] HRESULT Artist([out, retval] BSTR* pVal);
	[propput, id(6), helpstring("Artist")] HRESULT Artist([in] BSTR newVal);
	[propget, id(7), helpstring("Album")] HRESULT Album([out, retval] BSTR* pVal);
	[propput, id(7), helpstring("Album")] HRESULT Album([in] BSTR newVal);
	[propget, id(8), helpstring("Get or set the rating (0-5)")] HRESULT Rating([out, retval] BYTE* pVal);
	[propput, id(8), helpstring("Get or set the rating (0-5)")] HRESULT Rating([in] BYTE newVal);
	[propget, id(9), helpstring("Get or set the playcount")] HRESULT Playcount([out, retval] LONG* pVal);
	[propput, id(9), helpstring("Get or set the playcount")] HRESULT Playcount([in] LONG newVal);
	[id(10), helpstring("Insert the item in the playlist at the given position")] HRESULT Insert(LONG index);
	[propget, id(11), helpstring("Get or set the LastPlay value recorded in the ML")] HRESULT LastPlay([out, retval] LONG* pVal);
	[propput, id(11), helpstring("Get or set the LastPlay value recorded in the ML")] HRESULT LastPlay([in] LONG newVal);
	[id(12), helpstring("Refresh the cached meta data for the object")] HRESULT RefreshMeta(void);
	[propget, id(13), helpstring("Database index in the ML")] HRESULT DbIndex([out, retval] LONG* pVal);
	[propget, id(14), helpstring("Length")] HRESULT Length([out, retval] LONG* pVal);
	[propget, id(15), helpstring("Track Number in the album")] HRESULT Track([out, retval] LONG* pVal);
	[propget, id(16), helpstring("Get or set the Genre")] HRESULT Genre([out, retval] BSTR* pVal);
	[propput, id(16), helpstring("Get or set the Genre")] HRESULT Genre([in] BSTR newVal);
};
[
	object,
	uuid(4033571A-3035-4B64-8A3A-E316691C972C),
	dual,
	nonextensible,
	helpstring("IMediaLibrary Interface"),
	pointer_default(unique)
]
interface IMediaLibrary : IDispatch{
	[id(1), helpstring("Run a ML query and return the results as an array of MediaItems")] HRESULT RunQueryArray([in] BSTR QueryString, [out,retval] VARIANT* MediaItems);
	[id(2), helpstring("Loads an item from the media library by filename")] HRESULT GetItem([in] BSTR Filename, [out,retval] IMediaItem** MediaItem);
	[propget,  restricted, id(DISPID_NEWENUM), helpstring("property _NewEnum")] HRESULT _NewEnum([out, retval] IUnknown** pVal);
	[propget, id(DISPID_VALUE), helpstring("property Item")] HRESULT Item([in] LONG index, [out, retval] IMediaItem** pVal);
	[propget, id(3), helpstring("HWND for the MediaLibrary")] HRESULT Hwnd([out, retval] LONG* pVal);
	[id(4), helpstring("SendMessage")] HRESULT SendMsg([in] LONG msg, [in] LONG wParam, [in] LONGLONG lParam, [out,retval] LONG* result);
	[id(5), helpstring("PostMessage")] HRESULT PostMsg([in] LONG msg, [in] LONG wParam, [in] LONGLONG lParam, [out,retval] LONG* result);
};
[
	object,
	uuid(1C95F212-3B28-4713-B6AB-35C422409D75),
	dual,
	nonextensible, 
	helpstring("ISiteManager Interface"),
	pointer_default(unique)
]
interface ISiteManager : IDispatch{
	[id(1), helpstring("method AttachEvents")] HRESULT AttachEvents([in] IDispatch* EventObject, BSTR ObjectPrefix);
	[id(2), helpstring("method Quit")] HRESULT Quit(void);
	[propget, id(3), helpstring("Description as shown in the running scripts dialog")] HRESULT Description([out, retval] BSTR* pVal);
	[propput, id(3), helpstring("Description as shown in the running scripts dialog")] HRESULT Description([in] BSTR newVal);
	[propget, id(4), helpstring("Arguments passed to the script. -pos is passed when executed from the playlist")] HRESULT Arguments([out, retval] BSTR* pVal);
};
[
	uuid(142FF258-EE9C-4527-B2C7-4EAD10B752D9),
	version(1.0),
	helpstring("gen_activewa 1.0 Type Library")
]
library ActiveWinamp
{
	importlib("stdole2.tlb");
	[
		uuid(A1B0673A-2632-4FCA-8091-4CFD1F2A7710),
		helpstring("_IApplicationEvents Interface")
	]
	dispinterface _IApplicationEvents
	{
		properties:
		methods:
		[id(1), helpstring("ChangedTrack event")] HRESULT ChangedTrack(void);
		[id(2), helpstring("ChangedVolume event")] HRESULT ChangedVolume(void);
		[id(3), helpstring("ChangedStatus event")] HRESULT ChangedStatus(void);
		[id(4), helpstring("Input plugins send this when they are done playing back")] HRESULT PlaybackEOF(void);
	};
	[
		uuid(1C7F39AF-65C0-4C14-A392-6B4714705DC2),
		helpstring("Application Class")
	]
	coclass Application
	{
		[default] interface IApplication;
		[default, source] dispinterface _IApplicationEvents;
	};
	[
		uuid(5108E2F5-A7E8-4284-9555-9FA8C3994B9C),
		helpstring("Playlist Class")
	]
	coclass Playlist
	{
		[default] interface IPlaylist;
	};
	[
		uuid(CF07CEDE-5BA9-414D-87C1-28737EDEE17D),
		helpstring("MediaItem Class")
	]
	coclass MediaItem
	{
		[default] interface IMediaItem;
	};
	[
		uuid(9A01F0B7-47F9-41F6-93C4-1B2ED242DA4B),
		helpstring("MediaLibrary Class")
	]
	coclass MediaLibrary
	{
		[default] interface IMediaLibrary;
	};
	[
		uuid(89BBB22F-117F-4548-A2F8-FFDEBDF456D2),
		helpstring("SiteManager Class")
	]
	coclass SiteManager
	{
		[default] interface ISiteManager;
	};
};
